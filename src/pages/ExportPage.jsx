import React, { useEffect, useState, useCallback } from "react";
import { jsPDF } from "jspdf";
import { doc, getDoc } from "firebase/firestore";
import { db } from "../firebase/config";
import { ChevronLeft, Download } from "lucide-react";

export const ExportPage = ({ navigate }) => {
  const [pitch, setPitch] = useState(null);
  const [status, setStatus] = useState("loading"); // loading, ready, generating, error

  // ðŸ§© Get pitchId from URL and fetch from Firestore
  useEffect(() => {
    const fetchPitch = async () => {
      try {
        const currentPath = window.location.pathname;
        const pitchId = currentPath.split("/export/")[1];
        console.log("Fetching pitch:", pitchId);

        if (!pitchId) {
          setStatus("error");
          return;
        }

        const docRef = doc(db, "pitches", pitchId);
        const docSnap = await getDoc(docRef);

        if (docSnap.exists()) {
          setPitch({ id: docSnap.id, ...docSnap.data() });
          setStatus("ready");
        } else {
          console.error("No such pitch found.");
          setStatus("error");
        }
      } catch (err) {
        console.error("Error fetching pitch:", err);
        setStatus("error");
      }
    };

    fetchPitch();
  }, []);

  // ðŸ§¾ PDF download
  const handleDownloadPdf = useCallback(() => {
    if (!pitch) return setStatus("error");

    setStatus("generating");
    try {
      const doc = new jsPDF({ unit: "pt", format: "a4" });
      const margin = 50;
      let currentY = margin;
      const maxWidth = doc.internal.pageSize.getWidth() - 2 * margin;

      doc.setFontSize(24);
      doc.setFont("helvetica", "bold");
      doc.text(pitch.title || "Untitled Pitch", margin, currentY);
      currentY += 30;

      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(100, 100, 100);
      doc.text(
        `Tone: ${pitch.tone || "N/A"} | Audience: ${
          pitch.audience || "N/A"
        } | Created: ${new Date(pitch.createdAt).toLocaleDateString()}`,
        margin,
        currentY
      );
      currentY += 25;

      doc.setDrawColor(200, 200, 200);
      doc.line(margin, currentY, doc.internal.pageSize.getWidth() - margin, currentY);
      currentY += 20;

      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      const content = pitch.description || pitch.content || "No content available.";
      const splitText = doc.splitTextToSize(content, maxWidth);

      splitText.forEach((line) => {
        if (currentY > doc.internal.pageSize.getHeight() - margin) {
          doc.addPage();
          currentY = margin;
        }
        doc.text(line, margin, currentY);
        currentY += 20;
      });

      const footerY = doc.internal.pageSize.getHeight() - margin;
      doc.setFontSize(8);
      doc.setTextColor(150, 150, 150);
      doc.text(`Generated by PitchCraft`, margin, footerY, { align: "left" });

      doc.save(`${pitch.title.replace(/\s/g, "_")}_Pitch.pdf`);
      setStatus("ready");
    } catch (e) {
      console.error("PDF generation failed:", e);
      setStatus("error");
    }
  }, [pitch]);

  // ðŸ§© UI States
  if (status === "loading")
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <p className="text-gray-500">Loading pitch...</p>
      </div>
    );

  if (status === "error" || !pitch)
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50 p-6 text-center">
        <p className="text-xl text-red-500 mb-4">Pitch not found or invalid ID.</p>
        <button
          className="text-purple-600 hover:underline"
          onClick={() => navigate("/dashboard")}
        >
          Go back to Dashboard
        </button>
      </div>
    );

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow p-4 flex items-center space-x-4">
        <button
          className="text-purple-600 hover:text-purple-700"
          onClick={() => navigate("/dashboard")}
        >
          <ChevronLeft className="w-5 h-5" />
        </button>
        <h1 className="text-3xl font-bold text-gray-800">Export Pitch: {pitch.title}</h1>
      </header>

      {/* Main */}
      <main className="flex-grow p-6 flex flex-col items-center justify-start">
        <div className="bg-white p-6 rounded-xl shadow-md w-full max-w-4xl mb-6">
          <h2 className="text-xl font-semibold mb-2">Pitch Details</h2>
          <p className="text-sm text-gray-700">
            <strong>Tone:</strong> {pitch.tone} | <strong>Audience:</strong> {pitch.audience}
          </p>
          <p className="text-gray-700 mt-4 whitespace-pre-wrap">
            {pitch.description || pitch.content}
          </p>
        </div>

        <button
          onClick={handleDownloadPdf}
          disabled={status === "generating"}
          className="flex items-center justify-center bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
        >
          <Download className="w-5 h-5 mr-2" />
          {status === "generating" ? "Generating PDF..." : "Download as PDF"}
        </button>

        {status === "error" && (
          <p className="mt-4 text-red-500">Error generating PDF. Check console.</p>
        )}
      </main>
    </div>
  );
};
